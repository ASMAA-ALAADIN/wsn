# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pso', [dirname(__file__)])
        except ImportError:
            import _pso
            return _pso
        if fp is not None:
            try:
                _mod = imp.load_module('_pso', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pso = swig_import_helper()
    del swig_import_helper
else:
    import _pso
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pso.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pso.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pso.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pso.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pso.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pso.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pso.SwigPyIterator_copy(self)

    def next(self):
        return _pso.SwigPyIterator_next(self)

    def __next__(self):
        return _pso.SwigPyIterator___next__(self)

    def previous(self):
        return _pso.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pso.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pso.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pso.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pso.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pso.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pso.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pso.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pso.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector0, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.vector0_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.vector0___nonzero__(self)

    def __bool__(self):
        return _pso.vector0___bool__(self)

    def __len__(self):
        return _pso.vector0___len__(self)

    def __getslice__(self, i, j):
        return _pso.vector0___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pso.vector0___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pso.vector0___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pso.vector0___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pso.vector0___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pso.vector0___setitem__(self, *args)

    def pop(self):
        return _pso.vector0_pop(self)

    def append(self, x):
        return _pso.vector0_append(self, x)

    def empty(self):
        return _pso.vector0_empty(self)

    def size(self):
        return _pso.vector0_size(self)

    def swap(self, v):
        return _pso.vector0_swap(self, v)

    def begin(self):
        return _pso.vector0_begin(self)

    def end(self):
        return _pso.vector0_end(self)

    def rbegin(self):
        return _pso.vector0_rbegin(self)

    def rend(self):
        return _pso.vector0_rend(self)

    def clear(self):
        return _pso.vector0_clear(self)

    def get_allocator(self):
        return _pso.vector0_get_allocator(self)

    def pop_back(self):
        return _pso.vector0_pop_back(self)

    def erase(self, *args):
        return _pso.vector0_erase(self, *args)

    def __init__(self, *args):
        this = _pso.new_vector0(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pso.vector0_push_back(self, x)

    def front(self):
        return _pso.vector0_front(self)

    def back(self):
        return _pso.vector0_back(self)

    def assign(self, n, x):
        return _pso.vector0_assign(self, n, x)

    def resize(self, *args):
        return _pso.vector0_resize(self, *args)

    def insert(self, *args):
        return _pso.vector0_insert(self, *args)

    def reserve(self, n):
        return _pso.vector0_reserve(self, n)

    def capacity(self):
        return _pso.vector0_capacity(self)
    __swig_destroy__ = _pso.delete_vector0
    __del__ = lambda self: None
vector0_swigregister = _pso.vector0_swigregister
vector0_swigregister(vector0)

class vector1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector1, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.vector1_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.vector1___nonzero__(self)

    def __bool__(self):
        return _pso.vector1___bool__(self)

    def __len__(self):
        return _pso.vector1___len__(self)

    def __getslice__(self, i, j):
        return _pso.vector1___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pso.vector1___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pso.vector1___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pso.vector1___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pso.vector1___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pso.vector1___setitem__(self, *args)

    def pop(self):
        return _pso.vector1_pop(self)

    def append(self, x):
        return _pso.vector1_append(self, x)

    def empty(self):
        return _pso.vector1_empty(self)

    def size(self):
        return _pso.vector1_size(self)

    def swap(self, v):
        return _pso.vector1_swap(self, v)

    def begin(self):
        return _pso.vector1_begin(self)

    def end(self):
        return _pso.vector1_end(self)

    def rbegin(self):
        return _pso.vector1_rbegin(self)

    def rend(self):
        return _pso.vector1_rend(self)

    def clear(self):
        return _pso.vector1_clear(self)

    def get_allocator(self):
        return _pso.vector1_get_allocator(self)

    def pop_back(self):
        return _pso.vector1_pop_back(self)

    def erase(self, *args):
        return _pso.vector1_erase(self, *args)

    def __init__(self, *args):
        this = _pso.new_vector1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pso.vector1_push_back(self, x)

    def front(self):
        return _pso.vector1_front(self)

    def back(self):
        return _pso.vector1_back(self)

    def assign(self, n, x):
        return _pso.vector1_assign(self, n, x)

    def resize(self, *args):
        return _pso.vector1_resize(self, *args)

    def insert(self, *args):
        return _pso.vector1_insert(self, *args)

    def reserve(self, n):
        return _pso.vector1_reserve(self, n)

    def capacity(self):
        return _pso.vector1_capacity(self)
    __swig_destroy__ = _pso.delete_vector1
    __del__ = lambda self: None
vector1_swigregister = _pso.vector1_swigregister
vector1_swigregister(vector1)

class vector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.vector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.vector2___nonzero__(self)

    def __bool__(self):
        return _pso.vector2___bool__(self)

    def __len__(self):
        return _pso.vector2___len__(self)

    def __getslice__(self, i, j):
        return _pso.vector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pso.vector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pso.vector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pso.vector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pso.vector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pso.vector2___setitem__(self, *args)

    def pop(self):
        return _pso.vector2_pop(self)

    def append(self, x):
        return _pso.vector2_append(self, x)

    def empty(self):
        return _pso.vector2_empty(self)

    def size(self):
        return _pso.vector2_size(self)

    def swap(self, v):
        return _pso.vector2_swap(self, v)

    def begin(self):
        return _pso.vector2_begin(self)

    def end(self):
        return _pso.vector2_end(self)

    def rbegin(self):
        return _pso.vector2_rbegin(self)

    def rend(self):
        return _pso.vector2_rend(self)

    def clear(self):
        return _pso.vector2_clear(self)

    def get_allocator(self):
        return _pso.vector2_get_allocator(self)

    def pop_back(self):
        return _pso.vector2_pop_back(self)

    def erase(self, *args):
        return _pso.vector2_erase(self, *args)

    def __init__(self, *args):
        this = _pso.new_vector2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pso.vector2_push_back(self, x)

    def front(self):
        return _pso.vector2_front(self)

    def back(self):
        return _pso.vector2_back(self)

    def assign(self, n, x):
        return _pso.vector2_assign(self, n, x)

    def resize(self, *args):
        return _pso.vector2_resize(self, *args)

    def insert(self, *args):
        return _pso.vector2_insert(self, *args)

    def reserve(self, n):
        return _pso.vector2_reserve(self, n)

    def capacity(self):
        return _pso.vector2_capacity(self)
    __swig_destroy__ = _pso.delete_vector2
    __del__ = lambda self: None
vector2_swigregister = _pso.vector2_swigregister
vector2_swigregister(vector2)

class vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.vector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.vector3___nonzero__(self)

    def __bool__(self):
        return _pso.vector3___bool__(self)

    def __len__(self):
        return _pso.vector3___len__(self)

    def __getslice__(self, i, j):
        return _pso.vector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pso.vector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pso.vector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pso.vector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pso.vector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pso.vector3___setitem__(self, *args)

    def pop(self):
        return _pso.vector3_pop(self)

    def append(self, x):
        return _pso.vector3_append(self, x)

    def empty(self):
        return _pso.vector3_empty(self)

    def size(self):
        return _pso.vector3_size(self)

    def swap(self, v):
        return _pso.vector3_swap(self, v)

    def begin(self):
        return _pso.vector3_begin(self)

    def end(self):
        return _pso.vector3_end(self)

    def rbegin(self):
        return _pso.vector3_rbegin(self)

    def rend(self):
        return _pso.vector3_rend(self)

    def clear(self):
        return _pso.vector3_clear(self)

    def get_allocator(self):
        return _pso.vector3_get_allocator(self)

    def pop_back(self):
        return _pso.vector3_pop_back(self)

    def erase(self, *args):
        return _pso.vector3_erase(self, *args)

    def __init__(self, *args):
        this = _pso.new_vector3(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pso.vector3_push_back(self, x)

    def front(self):
        return _pso.vector3_front(self)

    def back(self):
        return _pso.vector3_back(self)

    def assign(self, n, x):
        return _pso.vector3_assign(self, n, x)

    def resize(self, *args):
        return _pso.vector3_resize(self, *args)

    def insert(self, *args):
        return _pso.vector3_insert(self, *args)

    def reserve(self, n):
        return _pso.vector3_reserve(self, n)

    def capacity(self):
        return _pso.vector3_capacity(self)
    __swig_destroy__ = _pso.delete_vector3
    __del__ = lambda self: None
vector3_swigregister = _pso.vector3_swigregister
vector3_swigregister(vector3)

class vector4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector4, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.vector4_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.vector4___nonzero__(self)

    def __bool__(self):
        return _pso.vector4___bool__(self)

    def __len__(self):
        return _pso.vector4___len__(self)

    def __getslice__(self, i, j):
        return _pso.vector4___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pso.vector4___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pso.vector4___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pso.vector4___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pso.vector4___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pso.vector4___setitem__(self, *args)

    def pop(self):
        return _pso.vector4_pop(self)

    def append(self, x):
        return _pso.vector4_append(self, x)

    def empty(self):
        return _pso.vector4_empty(self)

    def size(self):
        return _pso.vector4_size(self)

    def swap(self, v):
        return _pso.vector4_swap(self, v)

    def begin(self):
        return _pso.vector4_begin(self)

    def end(self):
        return _pso.vector4_end(self)

    def rbegin(self):
        return _pso.vector4_rbegin(self)

    def rend(self):
        return _pso.vector4_rend(self)

    def clear(self):
        return _pso.vector4_clear(self)

    def get_allocator(self):
        return _pso.vector4_get_allocator(self)

    def pop_back(self):
        return _pso.vector4_pop_back(self)

    def erase(self, *args):
        return _pso.vector4_erase(self, *args)

    def __init__(self, *args):
        this = _pso.new_vector4(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pso.vector4_push_back(self, x)

    def front(self):
        return _pso.vector4_front(self)

    def back(self):
        return _pso.vector4_back(self)

    def assign(self, n, x):
        return _pso.vector4_assign(self, n, x)

    def resize(self, *args):
        return _pso.vector4_resize(self, *args)

    def insert(self, *args):
        return _pso.vector4_insert(self, *args)

    def reserve(self, n):
        return _pso.vector4_reserve(self, n)

    def capacity(self):
        return _pso.vector4_capacity(self)
    __swig_destroy__ = _pso.delete_vector4
    __del__ = lambda self: None
vector4_swigregister = _pso.vector4_swigregister
vector4_swigregister(vector4)

class map0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, map0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, map0, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pso.map0_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pso.map0___nonzero__(self)

    def __bool__(self):
        return _pso.map0___bool__(self)

    def __len__(self):
        return _pso.map0___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pso.map0___getitem__(self, key)

    def __delitem__(self, key):
        return _pso.map0___delitem__(self, key)

    def has_key(self, key):
        return _pso.map0_has_key(self, key)

    def keys(self):
        return _pso.map0_keys(self)

    def values(self):
        return _pso.map0_values(self)

    def items(self):
        return _pso.map0_items(self)

    def __contains__(self, key):
        return _pso.map0___contains__(self, key)

    def key_iterator(self):
        return _pso.map0_key_iterator(self)

    def value_iterator(self):
        return _pso.map0_value_iterator(self)

    def __setitem__(self, *args):
        return _pso.map0___setitem__(self, *args)

    def asdict(self):
        return _pso.map0_asdict(self)

    def __init__(self, *args):
        this = _pso.new_map0(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _pso.map0_empty(self)

    def size(self):
        return _pso.map0_size(self)

    def swap(self, v):
        return _pso.map0_swap(self, v)

    def begin(self):
        return _pso.map0_begin(self)

    def end(self):
        return _pso.map0_end(self)

    def rbegin(self):
        return _pso.map0_rbegin(self)

    def rend(self):
        return _pso.map0_rend(self)

    def clear(self):
        return _pso.map0_clear(self)

    def get_allocator(self):
        return _pso.map0_get_allocator(self)

    def count(self, x):
        return _pso.map0_count(self, x)

    def erase(self, *args):
        return _pso.map0_erase(self, *args)

    def find(self, x):
        return _pso.map0_find(self, x)

    def lower_bound(self, x):
        return _pso.map0_lower_bound(self, x)

    def upper_bound(self, x):
        return _pso.map0_upper_bound(self, x)
    __swig_destroy__ = _pso.delete_map0
    __del__ = lambda self: None
map0_swigregister = _pso.map0_swigregister
map0_swigregister(map0)

class pair0(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair0, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair0, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pso.new_pair0(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _pso.pair0_first_set
    __swig_getmethods__["first"] = _pso.pair0_first_get
    if _newclass:
        first = _swig_property(_pso.pair0_first_get, _pso.pair0_first_set)
    __swig_setmethods__["second"] = _pso.pair0_second_set
    __swig_getmethods__["second"] = _pso.pair0_second_get
    if _newclass:
        second = _swig_property(_pso.pair0_second_get, _pso.pair0_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pso.delete_pair0
    __del__ = lambda self: None
pair0_swigregister = _pso.pair0_swigregister
pair0_swigregister(pair0)

class pair1(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair1, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair1, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pso.new_pair1(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _pso.pair1_first_set
    __swig_getmethods__["first"] = _pso.pair1_first_get
    if _newclass:
        first = _swig_property(_pso.pair1_first_get, _pso.pair1_first_set)
    __swig_setmethods__["second"] = _pso.pair1_second_set
    __swig_getmethods__["second"] = _pso.pair1_second_get
    if _newclass:
        second = _swig_property(_pso.pair1_second_get, _pso.pair1_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pso.delete_pair1
    __del__ = lambda self: None
pair1_swigregister = _pso.pair1_swigregister
pair1_swigregister(pair1)

class pair2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair2, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pso.new_pair2(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_setmethods__["first"] = _pso.pair2_first_set
    __swig_getmethods__["first"] = _pso.pair2_first_get
    if _newclass:
        first = _swig_property(_pso.pair2_first_get, _pso.pair2_first_set)
    __swig_setmethods__["second"] = _pso.pair2_second_set
    __swig_getmethods__["second"] = _pso.pair2_second_get
    if _newclass:
        second = _swig_property(_pso.pair2_second_get, _pso.pair2_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _pso.delete_pair2
    __del__ = lambda self: None
pair2_swigregister = _pso.pair2_swigregister
pair2_swigregister(pair2)

class PSO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PSO, name)
    __repr__ = _swig_repr

    def __init__(self, exclusive, overlapping, ids, config):
        this = _pso.new_PSO(exclusive, overlapping, ids, config)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pso.delete_PSO
    __del__ = lambda self: None

    def run(self, energies, sleep_probs):
        return _pso.PSO_run(self, energies, sleep_probs)
PSO_swigregister = _pso.PSO_swigregister
PSO_swigregister(PSO)

# This file is compatible with both classic and new-style classes.


